#!/bin/env sh

# setting some variables
playpod_file="/tmp/playpod.hist"
download_folder="~/music"
menu_app="dmenu -i -fn Hack"
pid_previous_playpod="$(pgrep -f mpv\ --script | sed '1!d')"
clipboard="$(wl-paste)"
loop=""

# if xorg is running then uses xclip
if [ "$DISPLAY" -a -z "$WAYLAND_DISPLAY" ];then
    clipboard="$(xclip -o)"
fi

select_from_history()
{
	# printing everything but the url
	selected="$(printf "Clear History\n$(sed -r "s/^http[^ \t]+ //g" "$playpod_file")" | $menu_app -p 'play:')"

	if [ ! "$selected" ];then
		exit
	fi

	if [ "$selected" = "Clear History" ];then
		printf "" > $playpod_file
		exit 0
	#elif [ "$selected" = "Play All" ];then
	#	play_all_history # do a function after
	fi

	selected=$(grep "$selected" $playpod_file | awk '{print $1}')
}

kill_previous_pid()
{
	kill -9 $pid_previous_playpod
}

write_history()
{
	title="$(youtube-dl --get-title $url)"
	if [ ! "$(grep "$title" $playpod_file)" ];then
		echo "$url $title" >> $playpod_file
	fi
}

play()
{
	# testing if gonna use history or copyboard
	if [ "$selected" ];then
		url="$selected"
	else
		url="$($clipboard)"
		# saving history
		write_history &
	fi

	# killing here
	if [ $pid_previous_playpod ];then
		kill_previous_pid
	fi
	
	mpv --script /usr/lib/mpv/mpris.so $loop --no-video "$url" &> /dev/null
}

download_current()
{
	download="$(ps aux | grep 'mpv\ --loop\ --script\ /usr/lib/mpv/mpris.so\ --no-video' | sed '1!d' | awk '{print $NF}')"
	title="$(youtube-dl --get-title $download)" &
	youtube-dl --extract-audio --audio-format mp3 "$download" -o "$download_folder/%(title)s.%(etx)s" \
		--add-metadata --embed-thumbnail \
		--exec "notify-send downloaded $title"
	if [ $? -ne 0 ];then
		notify-send "download failed"
	fi
}

menu()
{
	if [ "$pid_previous_playpod" ];then
		status="$(playerctl --player=mpv metadata --format '{{lc(status)}}: {{duration(position)}}|{{duration(mpris:length)}}')"
		notify-send "$(playerctl --player=mpv metadata title)" 

		options="Resume|Pause\nPlay_Copyboard\nLoop\nStop\nHistory\nDownload_Current\nNothing"
	else
		status="menu:"
		# may fail but I think it is worth the risk(just youtube-dl can't get info from)
        echo "$(youtube-dl --get-title ${clipboard})"
        notify-send "$(youtube-dl --get-title ${clipboard})" &
		
		options="Play_Clipboard\nLoop\nHistory\nNothing"
	fi

	case "$(printf $options | $menu_app -p "$status")" in
		"Play_Clipboard")     play;; # gonna kill the previous mpv process
		"Loop")               loop="--loop";play;;
		"Resume|Pause")       playerctl --player=mpv play-pause;;
		"Stop")               kill_previous_pid;;
		"Download_Current")   download_current;;
		"History")            select_from_history && play;;
		"Nothing")            ;; # nothing literally ;)
	esac
}

menu
